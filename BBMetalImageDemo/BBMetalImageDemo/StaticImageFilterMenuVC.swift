//
//  StaticImageFilterMenuVC.swift
//  BBMetalImageDemo
//
//  Created by Kaibo Lu on 4/2/19.
//  Copyright Â© 2019 Kaibo Lu. All rights reserved.
//

import UIKit

class StaticImageFilterMenuVC: UIViewController {
    private var list: [(String, NoParamterBlock)]!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        title = "Static image"
        view.backgroundColor = .gray
        
        let brightness = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .brightness), animated: true) }
        }
        let exposure = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .exposure), animated: true) }
        }
        let contrast = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .contrast), animated: true) }
        }
        let saturation = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .saturation), animated: true) }
        }
        let gamma = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .gamma), animated: true) }
        }
        let levels = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .levels), animated: true) }
        }
        let colorMatrix = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .colorMatrix), animated: true) }
        }
        let rgba = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .rgba), animated: true) }
        }
        let hue = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .hue), animated: true) }
        }
        let vibrance = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .vibrance), animated: true) }
        }
        let whiteBalance = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .whiteBalance), animated: true) }
        }
        let highlightShadow = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .highlightShadow), animated: true) }
        }
        let highlightShadowTint = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .highlightShadowTint), animated: true) }
        }
        let lookup = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .lookup), animated: true) }
        }
        let colorInversion = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .colorInversion), animated: true) }
        }
        let monochrome = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .monochrome), animated: true) }
        }
        let falseColor = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .falseColor), animated: true) }
        }
        let haze = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .haze), animated: true) }
        }
        let luminance = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .luminance), animated: true) }
        }
        let luminanceThreshold = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .luminanceThreshold), animated: true) }
        }
        let erosion = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .erosion), animated: true) }
        }
        let rgbaErosion = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .rgbaErosion), animated: true) }
        }
        let dilation = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .dilation), animated: true) }
        }
        let rgbaDilation = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .rgbaDilation), animated: true) }
        }
        let chromaKey = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .chromaKey), animated: true) }
        }
        let crop = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .crop), animated: true) }
        }
        let resize = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .resize), animated: true) }
        }
        let rotate = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .rotate), animated: true) }
        }
        let flip = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .flip), animated: true) }
        }
        let transform = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .transform), animated: true) }
        }
        let sharpen = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .sharpen), animated: true) }
        }
        let unsharpMask = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .unsharpMask), animated: true) }
        }
        let gaussianBlur = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .gaussianBlur), animated: true) }
        }
        let boxBlur = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .boxBlur), animated: true) }
        }
        let zoomBlur = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .zoomBlur), animated: true) }
        }
        let motionBlur = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .motionBlur), animated: true) }
        }
        let tiltShift = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .tiltShift), animated: true) }
        }
        let normalBlend = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .normalBlend), animated: true) }
        }
        let chromaKeyBlend = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .chromaKeyBlend), animated: true) }
        }
        let dissolveBlend = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .dissolveBlend), animated: true) }
        }
        let addBlend = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .addBlend), animated: true) }
        }
        let subtractBlend = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .subtractBlend), animated: true) }
        }
        let multiplyBlend = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .multiplyBlend), animated: true) }
        }
        let divideBlend = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .divideBlend), animated: true) }
        }
        let overlayBlend = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .overlayBlend), animated: true) }
        }
        let darkenBlend = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .darkenBlend), animated: true) }
        }
        let lightenBlend = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .lightenBlend), animated: true) }
        }
        let colorBlend = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .colorBlend), animated: true) }
        }
        let colorBurnBlend = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .colorBurnBlend), animated: true) }
        }
        let colorDodgeBlend = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .colorDodgeBlend), animated: true) }
        }
        let screenBlend = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .screenBlend), animated: true) }
        }
        let exclusionBlend = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .exclusionBlend), animated: true) }
        }
        let differenceBlend = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .differenceBlend), animated: true) }
        }
        let hardLightBlend = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .hardLightBlend), animated: true) }
        }
        let softLightBlend = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .softLightBlend), animated: true) }
        }
        let alphaBlend = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .alphaBlend), animated: true) }
        }
        let sourceOverBlend = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .sourceOverBlend), animated: true) }
        }
        let hueBlend = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .hueBlend), animated: true) }
        }
        let saturationBlend = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .saturationBlend), animated: true) }
        }
        let luminosityBlend = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .luminosityBlend), animated: true) }
        }
        let linearBurnBlend = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .linearBurnBlend), animated: true) }
        }
        let maskBlend = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .maskBlend), animated: true) }
        }
        let pixellate = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .pixellate), animated: true) }
        }
        let polarPixellate = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .polarPixellate), animated: true) }
        }
        let polkaDot = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .polkaDot), animated: true) }
        }
        let halftone = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .halftone), animated: true) }
        }
        let crosshatch = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .crosshatch), animated: true) }
        }
        let sketch = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .sketch), animated: true) }
        }
        let thresholdSketch = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .thresholdSketch), animated: true) }
        }
        let toon = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .toon), animated: true) }
        }
        let posterize = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .posterize), animated: true) }
        }
        let vignette = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .vignette), animated: true) }
        }
        let kuwahara = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .kuwahara), animated: true) }
        }
        let swirl = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .swirl), animated: true) }
        }
        let bulge = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .bulge), animated: true) }
        }
        let pinch = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .pinch), animated: true) }
        }
        let convolution3x3 = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .convolution3x3), animated: true) }
        }
        let emboss = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .emboss), animated: true) }
        }
        let sobelEdgeDetection = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .sobelEdgeDetection), animated: true) }
        }
        let bilateralBlur = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .bilateralBlur), animated: true) }
        }
        let beauty = { [weak self] in
            if let self = self { self.navigationController?.pushViewController(StaticImageFilterVC(type: .beauty), animated: true) }
        }
        list = [("äº®åº¦", brightness),
                ("æå", exposure),
                ("å¯¹æ¯åº¦", contrast),
                ("é¥±ååº¦", saturation),
                ("ä¼½é©¬", gamma),
                ("è²é¶", levels),
                ("é¢è²ç©éµ", colorMatrix),
                ("RGBA", rgba),
                ("è²è°", hue),
                ("è²å½©å¢å¼º", vibrance),
                ("ç½å¹³è¡¡", whiteBalance),
                ("é«åé´å½±", highlightShadow),
                ("é«åé´å½±è²è°", highlightShadowTint),
                ("æ¥æ¾è¡¨", lookup),
                ("é¢è²åè½¬", colorInversion),
                ("åè²", monochrome),
                ("ä¼ªè²", falseColor),
                ("é¾å", haze),
                ("äº®åº¦", luminance),
                ("äº®åº¦éå¼", luminanceThreshold),
                ("èè", erosion),
                ("RGBAèè", rgbaErosion),
                ("è¨è", dilation),
                ("RGBAè¨è", rgbaDilation),
                ("è²åº¦é®", chromaKey),
                ("è£åª", crop),
                ("è°æ´å¤§å°", resize),
                ("æè½¬", rotate),
                ("ç¿»è½¬", flip),
                ("åæ¢", transform),
                ("éå", sharpen),
                ("åéåèç", unsharpMask),
                ("é«æ¯æ¨¡ç³", gaussianBlur),
                ("æ¹æ¡æ¨¡ç³", boxBlur),
                ("ç¼©æ¾æ¨¡ç³", zoomBlur),
                ("è¿å¨æ¨¡ç³", motionBlur),
                ("ç§»è½´", tiltShift),
                ("æ­£å¸¸æ··å", normalBlend),
                ("è²åº¦é®æ··å", chromaKeyBlend),
                ("æº¶è§£æ··å", dissolveBlend),
                ("å æ³æ··å", addBlend),
                ("åæ³æ··å", subtractBlend),
                ("ä¹æ³æ··å", multiplyBlend),
                ("é¤æ³æ··å", divideBlend),
                ("å å æ··å", overlayBlend),
                ("åææ··å", darkenBlend),
                ("åäº®æ··å", lightenBlend),
                ("é¢è²æ··å", colorBlend),
                ("é¢è²å æ·±æ··å", colorBurnBlend),
                ("é¢è²åæ·¡æ··å", colorDodgeBlend),
                ("æ»¤è²æ··å", screenBlend),
                ("æé¤æ··å", exclusionBlend),
                ("å·®å¼æ··å", differenceBlend),
                ("å¼ºåæ··å", hardLightBlend),
                ("æåæ··å", softLightBlend),
                ("éææ··å", alphaBlend),
                ("æºå å æ··å", sourceOverBlend),
                ("è²è°æ··å", hueBlend),
                ("é¥±ååº¦æ··å", saturationBlend),
                ("äº®åº¦æ··å", luminosityBlend),
                ("çº¿æ§å æ·±æ··å", linearBurnBlend),
                ("é®ç½©æ··å", maskBlend),
                ("åç´ å", pixellate),
                ("æåæ åç´ å", polarPixellate),
                ("åç¹", polkaDot),
                ("åè²è°", halftone),
                ("äº¤åé´å½±", crosshatch),
                ("ç´ æ", sketch),
                ("éå¼ç´ æ", thresholdSketch),
                ("å¡éå", toon),
                ("è²è°åç¦»", posterize),
                ("æè§", vignette),
                ("æ¡åæ»¤é", kuwahara),
                ("æè½¬æ­æ²", swirl),
                ("å¸èµ·", bulge),
                ("æå", pinch),
                ("3x3å·ç§¯", convolution3x3),
                ("æµ®é", emboss),
                ("Sobelè¾¹ç¼æ£æµ", sobelEdgeDetection),
                ("åè¾¹æ¨¡ç³", bilateralBlur),
                ("ç¾é¢", beauty)]
        
        let tableView = UITableView(frame: view.bounds)
        tableView.register(UITableViewCell.self, forCellReuseIdentifier: UITableViewCell.description())
        tableView.dataSource = self
        tableView.delegate = self
        view.addSubview(tableView)
    }
}

extension StaticImageFilterMenuVC: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return list.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: UITableViewCell.description(), for: indexPath)
        cell.textLabel?.text = list[indexPath.row].0
        return cell
    }
}

extension StaticImageFilterMenuVC: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        list[indexPath.row].1()
    }
}
